pipeline {
    agent { 
        label 'mohan' 
    } 

    parameters {
        string(
            name: 'IMAGE_TAG', 
            defaultValue: 'latest', 
            description: 'Docker image tag to deploy'
        )
    }

    environment {
        HELM_RELEASE = "petclinic"
        HELM_CHART = "./"
        KUBE_CLUSTER = "devil-eks-cluster"
        KUBE_REGION = "us-west-2"
        NAMESPACE = "default"
    }

    stages {

        stage('Setup AWS Credentials & EKS Context') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                    credentialsId: 'aws_credentials',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {

                    echo "üîß Configuring AWS & EKS Cluster: ${KUBE_CLUSTER}"

                    // use single quotes to avoid Groovy expanding $ in shell
                    sh '''
                        echo "Setting AWS region and updating kubeconfig..."
                        export AWS_DEFAULT_REGION=$KUBE_REGION
                        aws eks update-kubeconfig --name $KUBE_CLUSTER
                        echo "Verifying cluster access..."
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('Verify Helm & Kubernetes Setup') {
            steps {
                echo "üß© Checking Helm and Kubernetes setup..."
                sh '''
                    echo "Helm Version:"
                    helm version
                    echo "Kubectl Context:"
                    kubectl config current-context
                    echo "Existing Helm Releases:"
                    helm list -A || true
                '''
            }
        }

        stage('Deploy / Upgrade Helm Release') {
            steps {
                echo "üöÄ Deploying Helm release '${HELM_RELEASE}' with image tag: ${params.IMAGE_TAG}"

                // use double quotes here because we want to expand ${params.IMAGE_TAG}
                sh """
                    helm upgrade --install ${HELM_RELEASE} ${HELM_CHART} \
                        --namespace ${NAMESPACE} \
                        -f conf_values.yaml \
                        --set spring.tag=${params.IMAGE_TAG} \
                        --wait
                """
            }
        }

        stage('Post-Deployment Verification') {
            steps {
                echo "üîç Verifying deployment..."
                sh '''
                    echo "Helm Status:"
                    helm status petclinic
                    echo "all in default namespace:"
                    kubectl get all -n default -o wide
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment completed successfully! üéâ"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
    }
}
